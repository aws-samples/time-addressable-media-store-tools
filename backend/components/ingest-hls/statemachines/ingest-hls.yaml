QueryLanguage: JSONata
StartAt: ParseManifest
States:
  ParseManifest:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Arguments:
      FunctionName: ${VariantFunctionArn}
      Payload: >-
        {% $states.input %}
    Assign:
      flowManifests: >-
        {% $states.result.Payload.flowManifests %}
      flows: >-
        {% $states.result.Payload.flows %}
      multiFlows: >-
        {% $states.result.Payload.multiFlows %}
    Retry:
      - ErrorEquals:
          - NoSuchKey
          - HTTPError
        IntervalSeconds: 10
        MaxAttempts: 30
        BackoffRate: 1.0
    Output: null
    Next: CreateFlows
  CreateFlows:
    Type: Map
    Items: >-
      {% $flows %}
    Assign:
      flows: null
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: PutFlow
      States:
        PutFlow:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: PUT
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input.id %}
            Headers:
              Content-Type: application/json
            RequestBody: >-
              {% $states.input %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output: null
          End: True
    Output: null
    Next: CreateMultiFlows
  CreateMultiFlows:
    Type: Map
    Items: >-
      {% $multiFlows %}
    Assign:
      multiFlows: null
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: PutMultiFlow
      States:
        PutMultiFlow:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: PUT
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input.id %}
            Headers:
              Content-Type: application/json
            RequestBody: >-
              {% $states.input %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output: null
          End: True
    Output: null
    Next: ProcessMediaManifests
  ProcessMediaManifests:
    Type: Map
    Items: >-
      {% $flowManifests %}
    Assign:
      flowManifests: null
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: TagFlowIngesting
      States:
        TagFlowIngesting:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: PUT
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input.flowId & '/tags/flow_status' %}
            Headers:
              Content-Type: application/json
            RequestBody: >-
              {% '"ingesting"' %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output: >-
            {% $states.input %}
          Next: ProcessManifest
        ProcessManifest:
          Type: Task
          Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
          HeartbeatSeconds: 900
          Arguments:
            MessageBody: >-
              {% $states.input %}
            MessageAttributes:
              TaskToken:
                DataType: String
                StringValue: >-
                  {% $states.context.Task.Token %}
            QueueUrl: ${MediaManifestQueueUrl}
          Output: >-
            {% $states.input %}
          Next: TagFlowClosedComplete
        TagFlowClosedComplete:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: PUT
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input.flowId & '/tags/flow_status' %}
            Headers:
              Content-Type: application/json
            RequestBody: >-
              {% '"closed_complete"' %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output: >-
            {% $states.input %}
          End: True
    Output: null
    End: True
