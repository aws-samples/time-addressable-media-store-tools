AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AuthRole:
    Type: String

  SfnFlowsFunctionRole:
    Type: String

  SfnFlowsFunctionArn:
    Type: String

  S3IngestionFunctionRole:
    Type: String

  S3IngestionFunctionArn:
    Type: String

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Tracing: Active
    Timeout: 30
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.13
    Architectures:
      - arm64

  Api:
    EndpointConfiguration:
      Type: REGIONAL
    Auth:
      DefaultAuthorizer: AWS_IAM
      AddDefaultAuthorizerToCorsPreflight: False
    TracingEnabled: true
    MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        DataTraceEnabled: True
        LoggingLevel: INFO

Resources:
  AuthRolePolicyMediaLive:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref AuthRole
      PolicyName: MediaLiveIngest
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - states:StartSyncExecution
            Resource:
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${MediaLiveStartIngestion.Name}
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${MediaLiveStopIngestion.Name}
          - Effect: Allow
            Action:
              - execute-api:Invoke
            Resource:
              - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${Api.Stage}/GET/channel-ingestion
          - Effect: Allow
            Action:
              - medialive:StartChannel
              - medialive:StopChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt ApiMediaLiveIngestFunction.Arn

  Api:
    Type: AWS::Serverless::Api
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W1028
    Properties:
      OpenApiVersion: 3.0.1
      StageName: Prod
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      AlwaysDeploy: True

  ApiMediaLiveIngestFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Resource level permissions not possible
          - id: W89
            reason: VPC not required
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api-channel-ingestion/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-arm64:4
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:ListRules
              Resource: '*'
            - Effect: Allow
              Action:
                - medialive:ListChannels
              Resource:
                - !Sub arn:${AWS::Partition}:medialive:${AWS::Region}:${AWS::AccountId}:channel:*
            - Effect: Allow
              Action:
                - s3:GetBucketNotification
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::*
      Events:
        getChannelIngestions:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /channel-ingestion
            Method: get

  SfnFlowsFunctionRolePolicyMediaLive:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref SfnFlowsFunctionRole
      PolicyName: MediaLiveIngest
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - medialive:DescribeChannel
            Resource: !Sub arn:${AWS::Partition}:medialive:${AWS::Region}:${AWS::AccountId}:channel:*

  StartIngestionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption no required.
    Properties:
      LogGroupName: /aws/vendedlogs/states/tams-tools-medialive-ingest-start
      RetentionInDays: 30

  StopIngestionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: Encryption no required.
    Properties:
      LogGroupName: /aws/vendedlogs/states/tams-tools-medialive-ingest-stop
      RetentionInDays: 30

  MediaLiveStartIngestion:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Tracing:
        Enabled: True
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StartIngestionLogGroup.Arn
      DefinitionUri: statemachines/start.yaml
      DefinitionSubstitutions:
        FlowsFunctionArn: !Ref SfnFlowsFunctionArn
        IngestionFunctionArn: !Ref S3IngestionFunctionArn
        IngestionFunctionRoleName: !Ref S3IngestionFunctionRole
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:PutResourcePolicy
                - logs:DescribeLogGroups
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:DescribeResourcePolicies
                - logs:GetLogDelivery
                - logs:ListLogDeliveries
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:log-stream:*
            - Effect: Allow
              Action:
                - logs:PutDestination
                - logs:PutDestinationPolicy
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:destination:*
            - Effect: Allow
              Action:
                - logs:PutSubscriptionFilter
              Resource:
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:destination:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !Ref SfnFlowsFunctionArn
            - Effect: Allow
              Action:
                - iam:PutRolePolicy
              Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${S3IngestionFunctionRole}
            - Effect: Allow
              Action:
                - ssm:PutParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
            - Effect: Allow
              Action:
                - events:PutRule
                - events:PutTargets
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
            - Effect: Allow
              Action:
                - lambda:AddPermission
              Resource: !Ref S3IngestionFunctionArn

  MediaLiveStopIngestion:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Tracing:
        Enabled: True
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StopIngestionLogGroup.Arn
      DefinitionUri: statemachines/stop.yaml
      DefinitionSubstitutions:
        IngestionFunctionArn: !Ref S3IngestionFunctionArn
        IngestionFunctionRoleName: !Ref S3IngestionFunctionRole
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:PutResourcePolicy
                - logs:DescribeLogGroups
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:DescribeResourcePolicies
                - logs:GetLogDelivery
                - logs:ListLogDeliveries
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:log-stream:*
            - Effect: Allow
              Action:
                - logs:PutDestination
                - logs:PutDestinationPolicy
              Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:destination:*
            - Effect: Allow
              Action:
                - logs:PutSubscriptionFilter
              Resource:
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StopIngestionLogGroup}:destination:*
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:RemoveTargets
                - events:DeleteRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
            - Effect: Allow
              Action:
                - lambda:RemovePermission
              Resource: !Ref S3IngestionFunctionArn
            - Effect: Allow
              Action:
                - ssm:DeleteParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
            - Effect: Allow
              Action:
                - iam:DeleteRolePolicy
              Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${S3IngestionFunctionRole}

Outputs:
  ApiEndpoint:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}

  StartArn:
    Value: !Ref MediaLiveStartIngestion

  StopArn:
    Value: !Ref MediaLiveStopIngestion
