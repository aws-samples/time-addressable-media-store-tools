QueryLanguage: JSONata
StartAt: GetSourceFlow
States:
  GetSourceFlow:
    Type: Task
    Resource: arn:aws:states:::http:invoke
    Arguments:
      Method: GET
      InvocationConfig:
        ConnectionArn: ${ConnectionArn}
      ApiEndpoint: >-
        {% '${TamsEndpoint}/flows/' & $states.input.flowId %}
    Retry:
      - ErrorEquals:
          - Events.ConnectionResource.InvalidConnectionState
          - Events.ConnectionResource.AuthInProgress
          - Events.ConnectionResource.ConcurrentModification
        IntervalSeconds: 1
        BackoffRate: 2
        MaxAttempts: 3
    Assign:
      changes: >-
        {% $states.input.changes %}
      flow: >-
        {% $states.result.ResponseBody %}
    Next: Check flow.collected_by
  Check flow.collected_by:
    Type: Choice
    Default: ApplyChanges
    Choices:
      - Next: Map flow.collected_by
        Condition: >-
          {% $exists($flow.collected_by) %}
    Output:
      - matchedSourceId: ""
        flowCollection: {}
  Map flow.collected_by:
    Type: Map
    Items: >-
      {% [$map($flow.collected_by, function($v) {{ "parent_source_id": $flow.source_id, "flow_id": $v }})] %}
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: GetCollectedByFlowCollection
      States:
        GetCollectedByFlowCollection:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: GET
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input.flow_id & '/flow_collection' %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Assign:
            collectedById: >-
              {% $states.input.flow_id %}
            flowCollection: >-
              {% $states.result.ResponseBody %}
          Output: >-
            {% $states.input %}
          Next: Check changes.format
        Check changes.format:
          Type: Choice
          Default: Return value
          Choices:
            - Next: Map flow_collection
              Condition: >-
                {% $exists($changes.format) %}
          Output: >-
            {% [$states.input.parent_source_id] %}
        Map flow_collection:
          Type: Map
          Items: >-
            {% $flowCollection %}
          ItemProcessor:
            ProcessorConfig:
              Mode: INLINE
            StartAt: GetFlowCollectionFlow
            States:
              GetFlowCollectionFlow:
                Type: Task
                Resource: arn:aws:states:::http:invoke
                Arguments:
                  Method: GET
                  InvocationConfig:
                    ConnectionArn: ${ConnectionArn}
                  ApiEndpoint: >-
                    {% '${TamsEndpoint}/flows/' & $states.input.id %}
                Retry:
                  - ErrorEquals:
                      - Events.ConnectionResource.InvalidConnectionState
                      - Events.ConnectionResource.AuthInProgress
                      - Events.ConnectionResource.ConcurrentModification
                    IntervalSeconds: 1
                    BackoffRate: 2
                    MaxAttempts: 3
                Output:
                  collectedFlow: >-
                    {% $states.result.ResponseBody %}
                Next: Check collected_flow.format
              Check collected_flow.format:
                Type: Pass
                Output: >-
                  {% $states.input.collectedFlow.format = $changes.format ? $states.input.collectedFlow.source_id : "" %}
                End: true
          Next: Return value
        Return value:
          Type: Pass
          End: true
          Output:
            matchedSourceId: >-
              {% $distinct($states.input)[0] %}
            flowCollection: >-
              {% {$collectedById: $flowCollection} %}
    Next: ApplyChanges
  ApplyChanges:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Arguments:
      FunctionName: ${ApplyChangesFunctionArn}
      Payload:
        flow: >-
          {% $flow %}
        changes: >-
          {% $changes %}
        newSourceId: >-
          {% 
            (
              $matchedId := $distinct($map($states.input, function($v) {$v.matchedSourceId}))[0];
              $boolean($matchedId) ? $matchedId : $uuid()
            )
          %}
    Assign:
      flowCollectionsMap: >-
        {% $merge($states.input.flowCollection) %}
      newFlow: >-
        {% $states.result.Payload %}
    Output: null
    Next: CreateNewFlow
  CreateNewFlow:
    Type: Task
    Resource: arn:aws:states:::http:invoke
    Arguments:
      Method: PUT
      InvocationConfig:
        ConnectionArn: ${ConnectionArn}
      ApiEndpoint: >-
        {% '${TamsEndpoint}/flows/' & $newFlow.id %}
      Headers:
        Content-Type: application/json
      RequestBody: >-
        {% $newFlow %}
    Retry:
      - ErrorEquals:
          - Events.ConnectionResource.InvalidConnectionState
          - Events.ConnectionResource.AuthInProgress
          - Events.ConnectionResource.ConcurrentModification
        IntervalSeconds: 1
        BackoffRate: 2
        MaxAttempts: 3
    Next: UpdateFlowCollections
  UpdateFlowCollections:
    Type: Map
    Items: >-
      {% $flow.collected_by %}
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: UpdateFlowCollection
      States:
        UpdateFlowCollection:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: PUT
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% '${TamsEndpoint}/flows/' & $states.input & '/flow_collection' %}
            Headers:
              Content-Type: application/json
            RequestBody: >-
              {% $append($lookup($flowCollectionsMap, $states.input), {"id": $newFlow.id, "role": $split($newFlow.format, ":")[3]}) %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          End: true
    Next: Response
  Response:
    Type: Pass
    Output: >-
      {% $newFlow.id %}
    End: true
