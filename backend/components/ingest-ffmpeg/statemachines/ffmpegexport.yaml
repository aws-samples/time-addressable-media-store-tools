QueryLanguage: JSONata
StartAt: GetStoreName
States:
  GetStoreName:
    Type: Task
    Resource: arn:aws:states:::http:invoke
    Arguments:
      Method: GET
      InvocationConfig:
        ConnectionArn: ${ConnectionArn}
      ApiEndpoint: ${TamsEndpoint}/service
    Assign:
      storeName: >-
        {% $states.result.ResponseBody.name ? $states.result.ResponseBody.name : "tams" %}
      timerange: >-
        {% $boolean($states.input.timerange) ? $states.input.timerange: "_" %}
      ffmpeg: >-
        {% $states.input.ffmpeg %}
    Retry:
      - ErrorEquals:
          - Events.ConnectionResource.InvalidConnectionState
          - Events.ConnectionResource.AuthInProgress
          - Events.ConnectionResource.ConcurrentModification
        IntervalSeconds: 1
        BackoffRate: 2
        MaxAttempts: 3
    Output: >-
      {% $map($states.input.flowIds, function($v) {{"flowId": $v }}) %}
    Next: MapFlows
  MapFlows:
    Type: Map
    Items: >-
      {% $states.input %}
    ItemProcessor:
      ProcessorConfig:
        Mode: INLINE
      StartAt: SetVariables
      States:
        SetVariables:
          Type: Pass
          Assign:
            flowId: >-
              {% $states.input.flowId %}
          Next: GetSegments
        GetSegments:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
            Method: GET
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% "${TamsEndpoint}/flows/" & $flowId & "/segments" %}
            QueryParameters:
              accept_get_urls: >-
                {% "aws.${AwsRegion}:s3:" & $storeName %}
              timerange: >-
                {% $timerange %}
          Assign:
            xPagingCount: >-
              {% $number($states.result.Headers.`x-paging-count`[0]) %}
            nextKey: >-
              {% $states.result.Headers.`x-paging-nextkey` ? $states.result.Headers.`x-paging-nextkey`[0] : null %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output:
            s3Objects: >-
              {%
                $boolean($states.result.ResponseBody)
                ?
                $sort(
                  $map(
                    $states.result.ResponseBody,
                    function($v) {
                      {
                        "key": $v.object_id,
                        "start": $reduce(
                          $split(
                            $substringBefore(
                              $substring(
                                $v.timerange,
                                1
                              ),
                              "_"
                            ),
                            ":"
                          ),
                          function($a, $t) {
                            $number($a) * 1000000000 + $number($t)
                          }
                        ),
                        "bucket": $substringBefore(
                          $substringAfter(
                            $v.get_urls[0].url,
                            "https://"
                          ),
                          ".s3."
                        )
                      }
                    }
                  ),
                  function($a, $b) {
                    $a.start > $b.start
                  }
                )
                :
                []
              %}
          Next: CheckResponse
        CheckResponse:
          Type: Choice
          Default: GetSegmentsNextPage
          Choices:
            - Condition: >-
                {% $xPagingCount = 0 %}
              Next: NoSegments
              Output: >-
                {% $states.input %}
            - Condition: >-
                {% $xPagingCount = 1 %}
              Next: SingleSegment
              Output: >-
                {% $states.input %}
            - Condition: >-
                {% $not($nextKey) %}
              Next: ConcatSegments
              Output: >-
                {% $states.input %}
          Output: >-
            {% $states.input %}
        GetSegmentsNextPage:
          Type: Task
          Resource: arn:aws:states:::http:invoke
          Arguments:
          Arguments:
            Method: GET
            InvocationConfig:
              ConnectionArn: ${ConnectionArn}
            ApiEndpoint: >-
              {% "${TamsEndpoint}/flows/" & $flowId & "/segments" %}
            QueryParameters:
              accept_get_urls: >-
                {% "aws.${AwsRegion}:s3:" & $storeName %}
              timerange: >-
                {% $timerange %}
              page: >-
                {% $nextKey %}
          Assign:
            xPagingCount: >-
              {% $number($states.result.Headers.`x-paging-count`[0]) %}
            nextKey: >-
              {% $states.result.Headers.`x-paging-nextkey` ? $states.result.Headers.`x-paging-nextkey`[0] : null %}
          Retry:
            - ErrorEquals:
                - Events.ConnectionResource.InvalidConnectionState
                - Events.ConnectionResource.AuthInProgress
                - Events.ConnectionResource.ConcurrentModification
              IntervalSeconds: 1
              BackoffRate: 2
              MaxAttempts: 3
          Output:
            s3Objects: >-
              {%
                $append(
                  $states.input.s3Objects,
                  $boolean($states.result.ResponseBody)
                  ?
                  $sort(
                    $map(
                      $states.result.ResponseBody,
                      function($v) {
                        {
                          "key": $v.object_id,
                          "start": $reduce(
                            $split(
                              $substringBefore(
                                $substring(
                                  $v.timerange,
                                  1
                                ),
                                "_"
                              ),
                              ":"
                            ),
                            function($a, $t) {
                              $number($a) * 1000000000 + $number($t)
                            }
                          ),
                          "bucket": $substringBefore(
                            $substringAfter(
                              $v.get_urls[0].url,
                              "https://"
                            ),
                            ".s3."
                          )
                        }
                      }
                    ),
                    function($a, $b) {
                      $a.start > $b.start
                    }
                  )
                  :
                  []
                )
              %}
          Next: CheckResponse
        SingleSegment:
          Type: Pass
          Output:
            bucket: >-
              {% $states.input.s3Objects[0].bucket %}
            key: >-
              {% $states.input.s3Objects[0].key %}
          End: True
        NoSegments:
          Type: Pass
          Output: null
          End: True
        ConcatSegments:
          Type: Task
          Resource: arn:aws:states:::lambda:invoke
          Arguments:
            FunctionName: ${FFmpegWorkerFunctionArn}
            Payload:
              action: CONCAT
              outputBucket: ${BucketName}
              s3Objects: >-
                {% $states.input.s3Objects %}
              ffmpeg:
                command:
                  "-c": copy
                  "-f": mpegts
          Output: >-
            {% $states.result.Payload.s3Object %}
          End: True
    Output:
      s3Objects: >-
        {% $exists($filter($states.result, function($v) {$boolean($v)})) ? $filter($states.result, function($v) {$boolean($v)}) : [] %}
    Next: CheckConcat
  CheckConcat:
    Type: Choice
    Default: MergeFlows
    Choices:
      - Condition: >-
          {% $not($states.input.s3Objects) %}
        Next: NoOutput
        Output: >-
          {% $states.input %}
    Output: >-
      {% $states.input %}
  MergeFlows:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Arguments:
      FunctionName: ${FFmpegWorkerFunctionArn}
      Payload:
        action: MERGE
        outputBucket: ${BucketName}
        s3Objects: >-
          {% $states.input.s3Objects %}
        ffmpeg: >-
          {% $ffmpeg %}
    Output: >-
      {% $states.result.Payload %}
    End: True
  NoOutput:
    Type: Fail
