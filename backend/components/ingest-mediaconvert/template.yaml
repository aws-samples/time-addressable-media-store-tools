AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AuthRole:
    Type: String

  SfnFlowsFunctionRole:
    Type: String

  SfnFlowsFunctionArn:
    Type: String

  S3IngestionFunctionRole:
    Type: String

  S3IngestionFunctionArn:
    Type: String

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Tracing: Active
    Timeout: 30
    MemorySize: 128
    Handler: app.lambda_handler
    Runtime: python3.12
    Architectures:
      - arm64

  Api:
    EndpointConfiguration:
      Type: REGIONAL
    Auth:
      DefaultAuthorizer: AWS_IAM
      AddDefaultAuthorizerToCorsPreflight: False
    TracingEnabled: true
    MethodSettings:
      - ResourcePath: /*
        HttpMethod: '*'
        DataTraceEnabled: True
        LoggingLevel: INFO

Resources:
  AuthRolePolicyMediaConvert:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref AuthRole
      PolicyName: MediaConvertIngest
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - execute-api:Invoke
            Resource:
              - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${Api.Stage}/GET/job-ingestion
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt ApiMediaConvertIngestFunction.Arn

  Api:

    # checkov:skip=CKV_AWS_73
    # checkov:skip=CKV_AWS_76
    # checkov:skip=CKV_AWS_80
    # checkov:skip=CKV_AWS_120
    Type: AWS::Serverless::Api
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W1028
    Properties:
      OpenApiVersion: 3.0.1
      StageName: Prod
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      AlwaysDeploy: True

  ApiMediaConvertIngestFunction:

    # checkov:skip=CKV_AWS_115
    # checkov:skip=CKV_AWS_116
    # checkov:skip=CKV_AWS_117
    # checkov:skip=CKV_AWS_173
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required
          - id: W92
            reason: ReservedConcurrentExecutions not required
    Properties:
      CodeUri: functions/api-job-ingestion/
      Layers:
        - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:69
      Environment:
        Variables:
          MEDIACONVERT_QUEUE: !Ref MediaConvertQueue
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - mediaconvert:ListJobs
                - mediaconvert:ListTagsForResource
              Resource:
                - !Sub arn:${AWS::Partition}:mediaconvert:${AWS::Region}:${AWS::AccountId}:*
      Events:
        getJobIngestions:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /job-ingestion
            Method: get

  SfnFlowsFunctionRolePolicyMediaConvert:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref SfnFlowsFunctionRole
      PolicyName: MediaConvertIngest
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${MediaConvertBucket.Arn}/uploads/*

  MediaConvertBucket:

    # checkov:skip=CKV_AWS_18
    # checkov:skip=CKV_AWS_21
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logging not required.
          - id: W41
            reason: Encryption not required.
          - id: W51
            reason: Bucket policy not required.
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: True

  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub ${MediaConvertBucket.Arn}/jobs/*

  MediaConvertQueue:
    Type: AWS::MediaConvert::Queue

  MediaConvertIngestion:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachines/mediaconvert.yaml
      DefinitionSubstitutions:
        MediaConvertQueueArn: !GetAtt MediaConvertQueue.Arn
        MediaConvertRoleArn: !GetAtt MediaConvertRole.Arn
        FlowsFunctionArn: !Ref SfnFlowsFunctionArn
        IngestionFunctionArn: !Ref S3IngestionFunctionArn
        IngestionFunctionRoleName: !Ref S3IngestionFunctionRole
        MediaConvertBucketName: !Ref MediaConvertBucket
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !Ref SfnFlowsFunctionArn
                - !Ref S3IngestionFunctionArn
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                - !GetAtt MediaConvertBucket.Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub ${MediaConvertBucket.Arn}/uploads/*
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - !Sub ${MediaConvertBucket.Arn}/jobs/*
            - Effect: Allow
              Action:
                - iam:PutRolePolicy
                - iam:DeleteRolePolicy
              Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${S3IngestionFunctionRole}
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:DeleteParameter
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*
            - Effect: Allow
              Action:
                - events:PutRule
                - events:PutTargets
                - events:RemoveTargets
                - events:DeleteRule
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*
            - Effect: Allow
              Action:
                - lambda:AddPermission
                - lambda:RemovePermission
              Resource: !Ref S3IngestionFunctionArn
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: '*'
            - Effect: Allow
              Action:
                - mediaconvert:CreateJob
                - mediaconvert:GetJob
                - mediaconvert:CancelJob
                - mediaconvert:TagResource
              Resource: '*'
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForMediaConvertJobRule
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref MediaConvertBucket
                object:
                  key:
                    - prefix: uploads/

Outputs:
  ApiEndpoint:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Api.Stage}

  BucketName:
    Value: !Ref MediaConvertBucket
